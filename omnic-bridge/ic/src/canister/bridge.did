type Pool = record {
  shared_decimals : nat8;
  token : Token;
  src_pool_id : nat32;
  local_decimals : nat8;
  liquidity : nat;
  src_chain : nat32;
  convert_rate : nat;
  pool_address : text;
};
type Result = variant { Ok : bool; Err : text };
type Result_1 = variant { Ok : Router; Err : text };
type Result_2 = variant { Ok : vec record { nat32; Router }; Err : text };
type Result_3 = variant { Ok : Pool; Err : text };
type Result_4 = variant { Ok : text; Err : text };
type Router = record {
  src_chain : nat32;
  pools : vec record { nat32; Pool };
  token_pool : vec record { text; nat32 };
  bridge_addr : text;
};
type Token = record {
  decimals : nat8;
  name : text;
  address : text;
  symbol : text;
};
service : () -> {
  add_chain : (nat32, text) -> (Result);
  add_owner : (principal) -> (Result);
  check_swap : (nat32, nat32, nat64) -> (Result) query;
  create_pool : (text, nat8) -> (Result);
  get_router : (nat32) -> (Result_1) query;
  get_routers : () -> (Result_2) query;
  handle_message : (nat32, vec nat8, nat32, vec nat8) -> (Result);
  pool_by_token_address : (nat32, text) -> (Result_3) query;
  remove_owner : (principal) -> (Result);
  set_canister_addr : () -> (Result_4);
  set_omnic : (principal) -> (Result);
  swap : (nat32, nat32, nat32, text, nat64) -> (Result_4);
}